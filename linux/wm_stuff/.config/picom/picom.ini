# Uses the official picom

#################################
#
# General Settings
#
#################################


# Specify the backend to use: `xrender`, `glx`, `egl` or `xr_glx_hybrid`.
# `xrender` is the default one.
#

# GLX backend (i wanna try egl cuz its better)
backend = "egl";
# glx-copy-from-front = false;
# glx-no-rebind-pixmap = false; # known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.)
use-damage = true;
#glx-swap-method = 1
#glx-use-copysubbuffermesa = false;
#glx-copy-from-front = false;

vsync = true

mark-wmwin-focused = true;
mark-ovredir-focused = true;
use-ewmh-active-win = false;
detect-rounded-corners = true;
corner-radius = 15;
detect-client-opacity = true;
dbe = false;
unredir-if-possible = false;
focus-exclude = [ ];
detect-transient = true;
detect-client-leader = true;
invert-color-include = [ ];

# transition fading
fading = true;
fade-delta = 4;
fade-in-step = 0.02;
fade-out-step = 0.03;
fade-exclude = [ ];

# Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
# rather than listening to 'FocusIn'/'FocusOut' event. Might have more accuracy,
# provided that the WM supports it.
#
use-ewmh-active-win = true;



# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
#
detect-transient = true;


# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. This usually means windows from the same application
# will be considered focused or unfocused at the same time.
# 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
#
# detect-client-leader = false


# Disable the use of damage information.
# This cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
use-damage = true;

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
#
# xrender-sync-fence = false
xrender-sync-fence = true;

#################################
#
# Shadow
#
#################################

shadow = false;
#no-dnd-shadow = true;
#no-dock-shadow = true;
shadow-radius = 15;
shadow-offset-x = -20;
shadow-offset-y = -20;
shadow-opacity = 0.7;
shadow-red = 0.0;
shadow-green = 0.0;
shadow-blue = 0.0;
shadow-exclude = [
    "class_g ?= 'Polybar'",
    "class_g ?= 'awesome'",
    "class_g = 'Firefox' && argb",
    "class_g ?= 'zoom'",
    "bounding_shaped",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
    "name = 'cpt_frame_xcb_window'",
    "name = 'rect-overlay'"
];


#################################
#
# Blur
#
#################################

blur-background = true;
blur-background-frame = false;
blur-background-fixed = true;
blur-kern = "3x3box";

# blur-method = "kernel";
blur-method = "dual_kawase";
blur-strength = 5;

blur-background-exclude = [
    "class_g ?= 'awesome'",
    "class_g ?= 'zoom'",
    "name = 'rect-overlay'"
];


#################################
#
# Opacity
#
#################################

#menu-opacity = 1;
# inactive-opacity = 0.85;
inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;
#alpha-step = 0.06


opacity-rule = [
    "90:class_g = 'URxvt'",
    "100:class_g = 'St' && focused",
    "50:class_g = 'St' && !focused",
    "90:class_g = 'kitty' && focused",
    "85:class_g = 'kitty' && !focused",
    "90:class_g = 'spotify' && focused",
    "85:class_g = 'spotify' && !focused",
    "100:class_g = 'vesktop' && focused",
    "85:class_g = 'vesktop' && !focused",
    "100:class_g = 'rofi'",
    "0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'" # deprecated on latest picom but still good to have
]



#################################
#
# Animations (finally)
#
#################################

animations = (
  {
    triggers = ["close", "hide"];
    opacity = {
      curve = "cubic-bezier(0.1,0.7,0.4,0.1)"; # or use "linear"
      duration = 0.11;
      start = "window-raw-opacity-before";
      end = 0;
    };
    blur-opacity = "opacity";
    shadow-opacity = "opacity";
  },
  {
    triggers = ["open", "show"];
    opacity = {
      curve = "cubic-bezier(0,1,1,1)";
      duration = 0.3;
      start = 0;
      end = "window-raw-opacity";
    };
    blur-opacity = "opacity";
    shadow-opacity = "opacity";
    offset-x = "(1 - scale-x) / 2 * window-width";
    offset-y = "(1 - scale-y) / 2 * window-height";
    scale-x = {
      curve = "cubic-bezier(0,1.3,1,1)";
      duration = 0.3;
      start = 0.6;
      end = 1;
    };
    scale-y = "scale-x";
    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
  },
  {
    triggers = ["geometry"]
    scale-x = {
      curve = "cubic-bezier(0,0,0,1.28)";
      duration = 0.22;
      start = "window-width-before / window-width";
      end = 1;
    }
    scale-y = {
      curve = "cubic-bezier(0,0,0,1.28)";
      duration = 0.22;
      start = "window-height-before / window-height";
      end = 1;
    }
    offset-x = {
      curve = "cubic-bezier(0,0,0,1.28)";
      duration = 0.22;
      start = "window-x-before - window-x";
      end = 0;
    }
    offset-y = {
      curve = "cubic-bezier(0,0,0,1.28)";
      duration = 0.22;
      start = "window-y-before - window-y";
      end = 0;
    }

    shadow-scale-x = "scale-x";
    shadow-scale-y = "scale-y";
    shadow-offset-x = "offset-x";
    shadow-offset-y = "offset-y";
  }
)



